# -*- coding: utf-8 -*-
"""
Created on Fri Jul  2 13:22:51 2021

@author: bayat2
"""
import numpy as np
from mapminmax_nn_func import mapminmax_apply, tansig_apply, mapminmax_reverse


"""-----------------------net_Target1_rest_func----------------------"""
def net_Target1_rest_func(x1):
    #x1:  2 * len(t)
    #y1: 1* len(t)
    
    # Input
    x1_step1_xoffset = np.array([[734.862915010152],[205]])
    x1_step1_gain = np.array([[0.0165641155435431],[0.0288484848484848]])
    x1_step1_ymin = -1
    
    # Layer 1
    b1 = np.array([[-0.19979912843808550482],[-2.5194193587024691361],[0.65537335300498966717]])
    IW1_1 = np.array([[-0.096496425519347728272,-0.31633697805662680524],\
                      [1.524994878938805476, 0.22581020577907304214],\
                      [-0.69467443674394013797, -0.28205813344931918163]])
    
    # Layer 2
    b2 = 2.7381704321110977851
    LW2_1 =  np.array([-0.43846342951102840191,2.9022277240747520466,-0.80639251481413209977])
    LW2_1=np.reshape(LW2_1,(1,-1))

    # Output 1
    y1_step1_ymin = -1;
    y1_step1_gain = 4.20553174987989e-06;
    y1_step1_xoffset = 153815.115865469;
    
    # Dimensions
    Q = x1.shape[1] #samples
    
    # Input 1
    xp1=mapminmax_apply(x1,x1_step1_xoffset,x1_step1_gain,x1_step1_ymin)
    
    # Layer 1
    a1 = tansig_apply(np.tile(b1,(1,Q)) + IW1_1@xp1)
    
    # Layer 2
    a2 = np.tile(b2,(1,Q)) + LW2_1@a1

    y1 = mapminmax_reverse(a2,y1_step1_xoffset,y1_step1_gain,y1_step1_ymin)
    
    return y1


"""-----------------------net_Target2_rest_func----------------------"""
def net_Target2_rest_func(x1):
    #x1:  2 * len(t)
    #y1: 1* len(t)
    
    # Input
    x1_step1_xoffset = np.array([[734.862915010152],[205]])
    x1_step1_gain = np.array([[0.0165641155435431],[0.0288484848484848]])
    x1_step1_ymin = -1
    
    # Layer 1
    b1 = np.array([[-2.7735084210485263512],[0.63978194864599957636]])
    IW1_1 = np.array([[1.7817969237846855712,0.27472497559939201839],\
                      [-0.72568137951677502695, -0.33623827404955514142]])

    # Layer 2
    b2 = 3.8404333357558830819
    LW2_1 =  np.array([4.2983264910811191939,-0.57579414199115419581])
    LW2_1=np.reshape(LW2_1,(1,-1))

    # Output 1
    y1_step1_ymin = -1;
    y1_step1_gain = 1.98227266356024e-06
    y1_step1_xoffset = 11139.471807546
    
    # Dimensions
    Q = x1.shape[1] #samples
    
    # Input 1
    xp1=mapminmax_apply(x1,x1_step1_xoffset,x1_step1_gain,x1_step1_ymin)
    
    # Layer 1
    a1 = tansig_apply(np.tile(b1,(1,Q)) + IW1_1@xp1)
    
    # Layer 2
    a2 = np.tile(b2,(1,Q)) + LW2_1@a1

    y1 = mapminmax_reverse(a2,y1_step1_xoffset,y1_step1_gain,y1_step1_ymin)
    
    return y1

"""-----------------------net_Target1_Suspend_func----------------------"""
def net_Target1_Suspend_func(x1):
    #x1:  2 * len(t)
    #y1: 1* len(t)
    
    # Input
    x1_step1_xoffset = np.array([[848],[255]])
    x1_step1_gain = np.array([[0.0176776695296637],[0.04]])
    x1_step1_ymin = -1
    
    # Layer 1
    b1 = np.array([[-1.0443149382719434382],[-4.9355164886321363227],[-1.8738624148266136427],[-2.2449704625493454024],[1.5052099649126919889],[2.3823112934835664056],[-0.10476030437102544501],[-0.41988888248620853672],[-1.4076334353419388545],[-1.9944832252790907212],[3.0431222305065523948],[3.5204396376856683659],[-3.3591082685674473751],[-2.8899985280583702085],[-6.5764634376675017435]])
    IW1_1 = np.array([[0.81582513472126882981, 0.29125281165975458464],\
                      [4.4682501205776095077, 1.8611720688221995434],\
                      [1.1721205827433911484, -0.85596903855721062637],\
                      [3.6022093110302288999, -2.5422999695556645072],\
                      [-1.8049654502823142543, -0.7919878805521000098],\
                      [-0.60715109313877257957, 3.0491323713310483079],\
                      [-0.97067563865646777632, -0.15336120880896481067],
                      [-0.073504942049589946929, -4.4124504854779234009],\
                      [-2.3240469494199449407, -0.29132636452848970077],\
                      [-11.093801095261564882, -7.4589937810495756665],\
                      [2.3288936952323973095, 2.9963866968096155574],\
                      [4.9591829887556313494, 0.61108006248982049691],\
                      [-4.6614408731477494641, -0.44656532101555201919],\
                      [-3.4904599319490055009, -0.58340723451163811752],\
                      [-1.7332685686610993514, 6.3287331917369806789]])
     
    # Layer 2
    b2 = 0.38827771626536883298
    LW2_1 =  np.array([0.95074563979434179029,-0.0042550800983463333074,-0.010264286730890999702,-0.00030938458577192614078,0.038694513512827155566,-0.00053214304440425577551,-0.62046459800569164766,0.00015365034404760344344,-0.17944602358833974809,-9.8597297958961192658e-05,-0.00039663458571768879816,0.20064013032396132985,0.11574440449081324633,0.20911483723752177788,0.00018339760462727762664])
    LW2_1=np.reshape(LW2_1,(1,-1))


    # Output 1
    y1_step1_ymin = -1;
    y1_step1_gain = 1.49668771720021e-07;
    y1_step1_xoffset = 629882.455800246;
    
    # Dimensions
    Q = x1.shape[1] #samples
    
    # Input 1
    xp1=mapminmax_apply(x1,x1_step1_xoffset,x1_step1_gain,x1_step1_ymin)
    
    # Layer 1
    a1 = tansig_apply(np.tile(b1,(1,Q)) + IW1_1@xp1)
    
    # Layer 2
    a2 = np.tile(b2,(1,Q)) + LW2_1@a1

    y1 = mapminmax_reverse(a2,y1_step1_xoffset,y1_step1_gain,y1_step1_ymin)
    
    return y1

"""-----------------------net_Target2_Suspend_func----------------------"""
def net_Target2_Suspend_func(x1):
    #x1:  2 * len(t)
    #y1: 1* len(t)
    
    # Input
    x1_step1_xoffset = np.array([[848],[255]])
    x1_step1_gain = np.array([[0.0176776695296637],[0.04]])
    x1_step1_ymin = -1
    
    # Layer 1
    b1 = np.array([[-6.2085588905020934192],[-3.5748324271428639776],[0.85106938708214063816],[3.2279862974443029877],[-3.8039561657703835351],[-2.159812162808210978],[-1.3214166427606686138],[0.43695003109329966229],[0.58534297886222574903],[-0.58446098562256421083],[-0.89068763277276696844],[0.55747724156666789153],[-0.4368140691709001544],[2.4212193321694419623],[-2.4109855638423547397],[-4.3929249599905508816],[-4.5567010508436469607],[8.8673549186905660235],[-5.2266806208978717763],[6.4936155693498847086]])
    IW1_1 = np.array([[3.6838908807233710085, 2.9834943019053055124],\
                      [1.8418881910324909068, -2.5461287879164204995],\
                      [-0.55674986468338816259, -0.092415175610951333374],\
                      [-4.3831438107143476657, -3.5311379794099275742],\
                      [2.3086689006101099864, 3.8516651655977054425],\
                      [2.9211657499957262019, 1.9157673511112178755],\
                      [2.6781629326901561505, 4.0937800059112552375],
                      [-0.2364878764394456323, 2.8842253220281777182],\
                      [-0.7942863815703029573, -5.9733123615453793676],\
                      [0.79418604223849509349, 5.9693197796206796113],\
                      [0.048803583415214901731, -0.094363060230115813898],\
                      [0.21465640933336094243, 0.049495766604429135282],\
                      [0.23754264292083787646, -2.8809889439210842887],\
                      [2.2524262131237877682, -5.9533356519110123273],\
                      [-4.2877534775182155613, 4.250809410235488528],\
                      [-1.7794691645705706939, 7.196233289034975833],\
                      [-3.7322738656532545853, 3.7756496992303403282],\
                      [5.6530109488997597467, 5.5310628989296946045],\
                      [-5.600279106174849808, -0.81785556734253994637],\
                      [1.3745737542247338236, -5.9268941588094996575]])
    
    # Layer 2
    b2 = -0.60933766217040907787
    LW2_1 =  np.array([0.0021083634123537126244, -0.001559223929551106216, -0.8038834014491718083, -0.00073487486376821716059, 0.00085189649896807550632, -0.0011952767005227182828, 0.00030966728182443310899, -0.7902762531648553912, 0.30570393455054672982, 0.30591884973514787971, 1.8051148527586386994, 4.8163380578338435001, -0.79184503180970833291, -0.00012383888752242003402, 0.00058829704429946491628, 1.6088872406223763537e-06, 0.0011053016929206916849, 0.0023572691413176268156, 0.1679589093006496614, -0.00038789598010305852529])
    LW2_1=np.reshape(LW2_1,(1,-1))

    # Output 1
    y1_step1_ymin = -1;
    y1_step1_gain = 4.74426132802869e-08;
    y1_step1_xoffset = 945653.508682906;
      
    # Dimensions
    Q = x1.shape[1] #samples
    
    # Input 1
    xp1=mapminmax_apply(x1,x1_step1_xoffset,x1_step1_gain,x1_step1_ymin)
    
    # Layer 1
    a1 = tansig_apply(np.tile(b1,(1,Q)) + IW1_1@xp1)
    
    # Layer 2
    a2 = np.tile(b2,(1,Q)) + LW2_1@a1

    y1 = mapminmax_reverse(a2,y1_step1_xoffset,y1_step1_gain,y1_step1_ymin)
    
    return y1